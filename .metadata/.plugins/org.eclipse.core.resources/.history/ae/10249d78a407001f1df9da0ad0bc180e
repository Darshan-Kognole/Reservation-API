package org.jsp.merchantbootapp.controller;

import java.util.List;
import java.util.Optional;

import org.jsp.merchantbootapp.Repository.MerchantRepository;
import org.jsp.merchantbootapp.dto.Merchant;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/merchants")
public class MerchantController {
	@Autowired
	private MerchantRepository merchantRepository;
	
	@PostMapping
	public Merchant saveMerchant(@RequestBody Merchant merchant) {
		return merchantRepository.save(merchant);
	}
	
	@GetMapping("/{id}")
	public Merchant findById(@PathVariable(name="id") int id) {
		Optional<Merchant> recMerchant = merchantRepository.findById(id);
		if(recMerchant.isPresent())
			return recMerchant.get();
		return null;
	}
	
	@PutMapping
	public Merchant updateMerchant(@RequestBody Merchant merchant) {
		Optional<Merchant> recMerchant = merchantRepository.findById(merchant.getId());
		if(recMerchant.isPresent()) {
			Merchant dbMerchant=recMerchant.get();
			dbMerchant.setEmail(merchant.getEmail());
			dbMerchant.setGst(merchant.getGst());
			dbMerchant.setName(merchant.getName());
			dbMerchant.setPhone(merchant.getPhone());
			dbMerchant.setPassword(merchant.getPassword());
			merchantRepository.save(dbMerchant);
			return dbMerchant;
		}
		return null;
	}
	
	@GetMapping
	public List<Merchant> findAllMerchants(){
		return merchantRepository.findAll();
	}
	
	@DeleteMapping("/{id}")
	public String deleteMerchant(@PathVariable(name="id") int id) {
		Optional<Merchant> recMerchant = merchantRepository.findById(id);
		if(recMerchant.isPresent()) {
			merchantRepository.delete(recMerchant.get());
			return "Merchant deleted";
		}
		return "Cannot Delete Merchant as id is Invalid";	

	}
	
	@GetMapping("/find-by-phone/{phone}")
	public Merchant findByPhone(@PathVariable(name="phone") long phone) {
		Optional<Merchant> recMerchant = merchantRepository.findByPhone(phone);
		if(recMerchant.isPresent())
			return recMerchant.get();
		return null;
	}
}
